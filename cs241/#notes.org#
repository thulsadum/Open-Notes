CS 241 Midterm study guide
* POSIX
** Examples
* System Calls
* Libraries
** strlen vs sizeof
* Pointers
** Pointer Operations
*** Pointer Arithmetic
** NULL
** Function Pointers
** Strings
*** What's the difference between char $c[ 80 ]$ and char* c
**** What about when they're used in sizeof()?
*** What's the difference between a string and a string literal?
*** How do strcpy, strcat, and strncat work?
* Memory
** Memory Fragmentation
*** Internal
    Interprocesses fragmentation causes by poor "mallocing" (doesn't
    have malloc)
*** External
    Physical to Virtual fragmentation managed by the kernel
** Cache/Page Table replacment policies
*** OPT
    Theortically optimal page replacement algorithm. Swaps out page
    used furtherst in the future....this is impossible for general systems
*** LRU
    Least recently used....see cs232 notes
*** Working Set
    The complete set of data needed to complete an operation. Often
    very localized in either time or space.
**** Locality
     see cs232
*** Thrashing
    Access pattern that assures high miss rate in the cache due to
    limitations of replacment algorithm
*** Belady's anomaly
    Sometimes as the size of the cache increases, miss rate also
    increases. Proved for page faults using FIFO
*** When is a process swapped out to disk
    When it is evicted by the replacment policy
    
** Stack
*** When is the stack full?
    When it meets the heap in the address space
** Heap
   Dynamic memory
*** Page faults
**** SEGFAULT
*** How does malloc and free work?
**** Memory Selection Algorithms
***** Implicit Free Lists
***** Explicit Free Lists
***** Segregated Free Lists
***** Buddy System
** Virtual Memory and Paging/Segmentation
*** Virtual vs Physical memory
**** Advantages of virtual memory
*** Paging vs Segmentation
*** Virtual to Physical address translation in multi-level page tables
**** MMU
***** Example: How does the virtual memory subsystem know the exact location where a particular page is stored on disk, if it is swapped out of memory?
**** TLB
**** Algorithm for address translation goes here
***** Example: Assuming a 32-bit address space and 4 KB pages, what is the virtual page # and offset for virtual address 0xd34f6a5?
*** Advantages of multi-level page tables
***** Example: Suppose we have a 64-bit address space and 16 KB pages. How big is the page table of a single process? What if it was multi-level?
*** Determining optimal page size
*** Calculating the number of pages per page table
* Threads and Processes
** Process
*** Creating a process using fork()
    - Starts new process with an incremented PC count
*** exec()
**** Example: Explain how a shell process can execute a different program.
*** Orphans and Zombies
** Threads
*** Shared Resources
*** Creating a thread using pthread_create()
*** pthread_detach() and pthread_join
**** Example: Explain how one process can wait on the return value of another process.
*** Exiting a thread with out a thread library exit call
**** How it happens: calling exit(), return, or termination
**** Problems
*** What are the maximum number of threads that can be run concurrently? How is this number determined?
** Context Switching
*** In Processes
*** In Threads
*** Kernel-Space vs User-Space thread managment
** Memory Consistency
*** Shared memory
**** Example: X is a global variable and initially X=0. What are the possible values for X after two threads both try to increment X?
*** Locking, Blocking, and Semaphores
**** Mutual exclusion
**** Semaphore and mutex
**** Designing a a lock system for concurrent programming
*** POSIX wait()
* Scheduling
** Five state model: started ,running, ready, blocked, terminated
** Scheduling schemes
*** Wait Time
*** Turnaround time
*** Response time
*** Preempting
*** Quanta
*** Fairness, progress guarentees, and interactive systems
*** Schemes
**** Round Robin
***** Quanta length vs performance
**** First Come First Serve (FCFS)
**** Pre-emptive SJF
**** Non-preemptive
***** Smallest Initial response time?
***** Smallest Initial wait?
***** Smallest Initial turnaround time?
***** smalled average wait time?
***** longest average wait time?
** Execution Order
** Starvation
** Blocking
** Signals and Interrupts
*** Explain how re-entrant functions are used in C.
** Convoy Effect
   The slow down of traffic due to queuing slowing down the whole system
   